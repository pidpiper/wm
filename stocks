<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stock Performance: SPX, RSG, and WM</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/date-fns"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <style>
        body {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            font-family: "Inter", "Inter Placeholder", sans-serif;
            font-size: 14px;
            line-height: 20px;
            color: rgb(102, 102, 102);
            background-color: #f7f7f7;
            margin: 0;
            padding: 0;
        }

        .content {
            flex-grow: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 2rem 1rem;
            width: 100%;
        }

        .container {
            max-width: 600px;
            width: 100%;
            padding: 0 1rem;
        }

        h1 {
            margin-bottom: 8px;
            font-size: 18px;
            font-weight: 600;
            color: rgb(102, 102, 102);
            font-family: "Times New Roman", Times, serif;
            text-align: left;
        }

        .subtitle {
            font-size: 12px;
            color: rgb(102, 102, 102);
            margin-bottom: 20px;
            text-align: left;
        }

        .chart-container {
            position: relative;
            width: 100%;
            height: 400px;
            margin-bottom: 20px;
        }

        canvas {
            width: 100% !important;
            height: 100% !important;
        }

        .footnote {
            font-size: 12px;
            color: rgb(102, 102, 102);
            text-align: left;
            margin-top: 10px;
        }

        .custom-legend {
            display: flex;
            flex-direction: row;
            gap: 5px;
            margin-top: 10px;
            text-align: left;
        }

        .legend-item {
            display: flex;
            align-items: center;
            font-size: 12px;
            color: rgb(102, 102, 102);
        }

        .legend-color {
            width: 20px;
            height: 10px;
            margin-right: 5px;
            border: 1px solid #ccc;
        }

        /* Updated Segmented Control Styles */
        .segmented-control {
            --background: rgba(239, 239, 240, 1);
            background: var(--background);
            border-radius: 6px;
            margin-bottom: 20px;
            padding: 1px;
            border: none;
            outline: none;
            display: grid;
            grid-auto-flow: column;
            grid-auto-columns: 1fr;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            position: relative;
            overflow: hidden;
            max-width: 300px;
        }

        .segmented-control .option {
            position: relative;
            cursor: pointer;
        }

        .segmented-control .option:hover input:not(:checked) + label span,
        .segmented-control .option:active input:not(:checked) + label span,
        .segmented-control .option:focus input:not(:checked) + label span {
            opacity: 0.2;
        }

        .segmented-control .option:active input:not(:checked) + label span {
            transform: scale(0.95);
        }

        .segmented-control .option label {
            position: relative;
            display: block;
            text-align: center;
            padding: 2px 4px;
            background: rgba(255, 255, 255, 0);
            font-weight: 500;
            color: rgb(102, 102, 102);
            font-size: 10px;
            font-family: "Inter", sans-serif;
            z-index: 2;
        }

        .segmented-control .option label::before,
        .segmented-control .option label::after {
            content: '';
            width: 1px;
            background: rgba(142, 142, 147, 0.15);
            position: absolute;
            top: 20%;
            bottom: 20%;
            border-radius: 10px;
            will-change: background;
            transition: background 0.2s ease;
            z-index: 3;
        }

        .segmented-control .option label::before {
            left: 0;
            transform: translateX(-0.5px);
        }

        .segmented-control .option label::after {
            right: 0;
            transform: translateX(0.5px);
        }

        .segmented-control .option:first-of-type label::before {
            opacity: 0;
        }

        .segmented-control .option:last-of-type label::after {
            opacity: 0;
        }

        .segmented-control .option input {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            width: 100%;
            height: 100%;
            padding: 0;
            margin: 0;
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            outline: none;
            border: none;
            opacity: 0;
        }

        .segmented-control .selection {
            background: rgba(255, 255, 255, 1);
            border: 0.5px solid rgba(0, 0, 0, 0.04);
            box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.12), 0 2px 1px 0 rgba(0, 0, 0, 0.04);
            border-radius: 4px;
            position: absolute;
            top: 1px;
            bottom: 1px;
            left: 1px;
            width: calc(33.33% - 2px);
            z-index: 1;
            will-change: transform;
            transition: transform 0.2s ease;
        }

        .segmented-control .option input:checked + label {
            cursor: default;
        }

        .segmented-control .option input:checked + label::before,
        .segmented-control .option input:checked + label::after {
            background: var(--background);
        }
    </style>
</head>
<body>
    <div class="content">
        <div class="container">
            <h1>Stock Performance: SPX, RSG, and WM</h1>
            <div class="subtitle">Percentage returns over time</div>
            <div class="segmented-control">
                <span class="selection"></span>
                <div class="option">
                    <input type="radio" id="since2010" name="baseline" value="2010">
                    <label for="since2010"><span>Since 2010</span></label>
                </div>
                <div class="option">
                    <input type="radio" id="since2014" name="baseline" value="2014" checked>
                    <label for="since2014"><span>Since 2015</span></label>
                </div>
                <div class="option">
                    <input type="radio" id="since2020" name="baseline" value="2020">
                    <label for="since2020"><span>Since 2020</span></label>
                </div>
            </div>
            <div class="chart-container">
                <canvas id="stockChart"></canvas>
            </div>
            <div class="custom-legend">
                <div class="legend-item">
                    <span class="legend-color" style="background-color: #1e90ff;"></span>
                    SPX % Return
                </div>
                <div class="legend-item">
                    <span class="legend-color" style="background-color: #32cd32;"></span>
                    RSG % Return
                </div>
                <div class="legend-item">
                    <span class="legend-color" style="background-color: #ff4500;"></span>
                    WM % Return
                </div>
            </div>
            <div class="footnote" id="footnote">
                Percentage returns calculated from June 30, 2014 baseline
            </div>
        </div>
    </div>

    <script>
        // Stock data placeholder
        const stockData = [
            { time: 1275399000, spx: 1030.71, rsg: 29.73, wm: 31.28999 },
            { time: 1277991000, spx: 1101.6, rsg: 31.86, wm: 33.95 },
            { time: 1280755800, spx: 1049.33, rsg: 29.42999, wm: 33.09 },
            { time: 1283347800, spx: 1141.2, rsg: 30.49001, wm: 35.74001 },
            { time: 1285939800, spx: 1183.26, rsg: 29.81, wm: 35.72 },
            { time: 1288618200, spx: 1180.55, rsg: 28.14, wm: 34.25 },
            { time: 1291213800, spx: 1257.64, rsg: 29.86, wm: 36.87 },
            { time: 1294065000, spx: 1286.12, rsg: 30.84, wm: 37.87 },
            { time: 1296570600, spx: 1327.22, rsg: 29.61, wm: 37.06 },
            { time: 1298989800, spx: 1325.83, rsg: 30.03999, wm: 37.34 },
            { time: 1301664600, spx: 1363.61, rsg: 31.62, wm: 39.46001 },
            { time: 1304343000, spx: 1345.2, rsg: 31.52, wm: 38.88 },
            { time: 1306935000, spx: 1320.64, rsg: 30.85001, wm: 37.27 },
            { time: 1309527000, spx: 1292.28, rsg: 29.03, wm: 31.49001 },
            { time: 1312205400, spx: 1218.89, rsg: 30.36, wm: 33.03999 },
            { time: 1314883800, spx: 1131.42, rsg: 28.06, wm: 32.56 },
            { time: 1317648600, spx: 1253.3, rsg: 28.46001, wm: 32.92999 },
            { time: 1320154200, spx: 1246.96, rsg: 27.45, wm: 31.3 },
            { time: 1322749800, spx: 1257.6, rsg: 27.55, wm: 32.71001 },
            { time: 1325601000, spx: 1312.41, rsg: 29.28, wm: 34.75999 },
            { time: 1328106600, spx: 1365.68, rsg: 29.83, wm: 34.98 },
            { time: 1330612200, spx: 1408.47, rsg: 30.56, wm: 34.96001 },
            { time: 1333373400, spx: 1397.91, rsg: 27.37, wm: 34.2 },
            { time: 1335879000, spx: 1310.33, rsg: 26.36, wm: 32.44 },
            { time: 1338557400, spx: 1362.16, rsg: 26.46001, wm: 33.39999 },
            { time: 1341235800, spx: 1379.32, rsg: 28.92999, wm: 34.39999 },
            { time: 1343827800, spx: 1406.58, rsg: 27.64999, wm: 34.58 },
            { time: 1346765400, spx: 1440.67, rsg: 27.50999, wm: 32.08 },
            { time: 1349098200, spx: 1412.16, rsg: 28.35001, wm: 32.74001 },
            { time: 1351776600, spx: 1416.18, rsg: 28.47, wm: 32.57001 },
            { time: 1354545000, spx: 1426.19, rsg: 29.33, wm: 33.74001 },
            { time: 1357137000, spx: 1498.11, rsg: 31.89, wm: 36.38 },
            { time: 1359729000, spx: 1514.68, rsg: 31.44, wm: 37.32001 },
            { time: 1362148200, spx: 1569.19, rsg: 33, wm: 39.21001 },
            { time: 1364823000, spx: 1597.57, rsg: 34.08, wm: 40.98 },
            { time: 1367415000, spx: 1630.74, rsg: 34.10001, wm: 41.92999 },
            { time: 1370266200, spx: 1606.28, rsg: 33.94, wm: 40.33 },
            { time: 1372685400, spx: 1685.73, rsg: 33.91, wm: 42.03 },
            { time: 1375363800, spx: 1632.97, rsg: 32.50999, wm: 40.44 },
            { time: 1378215000, spx: 1681.55, rsg: 33.36, wm: 41.24001 },
            { time: 1380634200, spx: 1756.54, rsg: 33.47, wm: 43.54 },
            { time: 1383312600, spx: 1805.81, rsg: 34.91, wm: 45.68 },
            { time: 1385994600, spx: 1848.36, rsg: 33.2, wm: 44.87 },
            { time: 1388673000, spx: 1782.59, rsg: 32.03, wm: 41.78 },
            { time: 1391437800, spx: 1859.45, rsg: 34.11, wm: 41.5 },
            { time: 1393857000, spx: 1872.34, rsg: 34.16, wm: 42.07 },
            { time: 1396359000, spx: 1883.95, rsg: 35.09, wm: 44.45 },
            { time: 1398951000, spx: 1923.57, rsg: 35.4, wm: 44.68 },
            { time: 1401715800, spx: 1960.23, rsg: 37.97, wm: 44.73 },
            { time: 1404221400, spx: 1930.67, rsg: 37.93, wm: 44.89 },
            { time: 1406899800, spx: 2003.37, rsg: 39.33, wm: 46.97 },
            { time: 1409664600, spx: 1972.29, rsg: 39.02, wm: 47.53 },
            { time: 1412170200, spx: 2018.05, rsg: 38.4, wm: 48.89 },
            { time: 1415025000, spx: 2067.56, rsg: 39.61, wm: 48.73 },
            { time: 1417444200, spx: 2058.9, rsg: 40.25, wm: 51.32 },
            { time: 1420209000, spx: 1994.99, rsg: 39.68, wm: 51.43 },
            { time: 1422887400, spx: 2104.5, rsg: 40.92, wm: 54.48 },
            { time: 1425306600, spx: 2067.89, rsg: 40.56, wm: 54.23 },
            { time: 1427895000, spx: 2085.51, rsg: 40.63, wm: 49.53 },
            { time: 1430487000, spx: 2107.39, rsg: 40.29, wm: 49.65 },
            { time: 1433165400, spx: 2063.11, rsg: 39.17, wm: 46.35 },
            { time: 1435757400, spx: 2103.84, rsg: 42.53, wm: 51.13 },
            { time: 1438608600, spx: 1972.18, rsg: 40.98, wm: 50.06 },
            { time: 1441114200, spx: 1920.03, rsg: 41.2, wm: 49.81 },
            { time: 1443706200, spx: 2079.36, rsg: 43.74, wm: 53.76 },
            { time: 1446474600, spx: 2080.41, rsg: 43.93, wm: 53.77 },
            { time: 1448980200, spx: 2043.94, rsg: 43.99, wm: 53.37 },
            { time: 1451917800, spx: 1940.24, rsg: 43.7, wm: 52.95 },
            { time: 1454337000, spx: 1932.23, rsg: 45.7, wm: 55.85 },
            { time: 1456842600, spx: 2059.74, rsg: 47.65, wm: 59 },
            { time: 1459517400, spx: 2065.3, rsg: 47.07, wm: 58.79 },
            { time: 1462195800, spx: 2096.96, rsg: 48.28, wm: 60.95 },
            { time: 1464787800, spx: 2098.86, rsg: 51.31, wm: 66.27 },
            { time: 1467379800, spx: 2173.6, rsg: 51.26, wm: 66.12 },
            { time: 1470058200, spx: 2170.95, rsg: 50.52, wm: 63.94 },
            { time: 1472736600, spx: 2168.27, rsg: 50.45, wm: 63.76 },
            { time: 1475501400, spx: 2126.15, rsg: 52.63, wm: 65.66 },
            { time: 1478007000, spx: 2198.81, rsg: 55.49, wm: 69.52 },
            { time: 1480602600, spx: 2238.83, rsg: 57.05, wm: 70.91 },
            { time: 1483453800, spx: 2278.87, rsg: 57.38, wm: 69.5 },
            { time: 1485959400, spx: 2363.64, rsg: 61.95, wm: 73.32 },
            { time: 1488378600, spx: 2362.72, rsg: 62.81, wm: 72.92 },
            { time: 1491226200, spx: 2384.2, rsg: 62.99, wm: 72.78 },
            { time: 1493645400, spx: 2411.8, rsg: 63.61, wm: 72.91 },
            { time: 1496323800, spx: 2423.41, rsg: 63.73, wm: 73.35 },
            { time: 1499088600, spx: 2470.3, rsg: 64.22, wm: 75.15 },
            { time: 1501594200, spx: 2471.65, rsg: 65.24, wm: 77.11 },
            { time: 1504272600, spx: 2519.36, rsg: 66.06, wm: 78.27 },
            { time: 1506951000, spx: 2575.26, rsg: 65.07, wm: 82.17 },
            { time: 1509543000, spx: 2647.58, rsg: 64.94, wm: 82.25 },
            { time: 1512138600, spx: 2673.61, rsg: 67.61, wm: 86.3 },
            { time: 1514903400, spx: 2823.81, rsg: 68.8, wm: 88.43 },
            { time: 1517495400, spx: 2713.83, rsg: 67.18, wm: 86.32 },
            { time: 1519914600, spx: 2640.87, rsg: 66.23, wm: 84.12 },
            { time: 1522675800, spx: 2648.05, rsg: 64.68, wm: 81.29 },
            { time: 1525181400, spx: 2705.27, rsg: 67.43, wm: 82.71 },
            { time: 1527859800, spx: 2718.37, rsg: 68.36, wm: 81.34 },
            { time: 1530538200, spx: 2816.29, rsg: 72.48, wm: 90 },
            { time: 1533130200, spx: 2901.52, rsg: 73.36, wm: 90.9 },
            { time: 1536067800, spx: 2913.98, rsg: 72.66, wm: 90.36 },
            { time: 1538400600, spx: 2711.74, rsg: 72.68, wm: 89.47 },
            { time: 1541079000, spx: 2760.17, rsg: 77.34, wm: 93.75 },
            { time: 1543847400, spx: 2506.85, rsg: 72.09, wm: 88.99 },
            { time: 1546439400, spx: 2704.1, rsg: 76.71, wm: 95.67 },
            { time: 1549031400, spx: 2784.49, rsg: 78.43, wm: 101.25 },
            { time: 1551450600, spx: 2834.4, rsg: 80.38, wm: 103.91 },
            { time: 1554125400, spx: 2945.83, rsg: 82.82, wm: 107.34 },
            { time: 1556717400, spx: 2752.06, rsg: 84.59, wm: 109.35 },
            { time: 1559568600, spx: 2941.76, rsg: 86.64, wm: 115.37 },
            { time: 1561987800, spx: 2980.38, rsg: 88.65, wm: 117 },
            { time: 1564666200, spx: 2926.46, rsg: 89.25, wm: 119.35 },
            { time: 1567517400, spx: 2976.74, rsg: 86.55, wm: 115 },
            { time: 1569936600, spx: 3037.56, rsg: 87.51, wm: 112.21 },
            { time: 1572615000, spx: 3140.98, rsg: 88.65, wm: 112.91 },
            { time: 1575297000, spx: 3230.78, rsg: 89.63, wm: 113.96 },
            { time: 1577975400, spx: 3225.52, rsg: 95.05, wm: 121.7 },
            { time: 1580740200, spx: 2954.22, rsg: 90.26, wm: 110.81 },
            { time: 1583159400, spx: 2584.59, rsg: 75.06, wm: 92.56 },
            { time: 1585747800, spx: 2912.43, rsg: 78.34, wm: 100.02 },
            { time: 1588339800, spx: 3044.31, rsg: 85.46, wm: 106.75 },
            { time: 1591018200, spx: 3100.29, rsg: 82.05, wm: 105.91 },
            { time: 1593610200, spx: 3271.12, rsg: 87.25, wm: 109.6 },
            { time: 1596461400, spx: 3500.31, rsg: 92.72, wm: 114 },
            { time: 1598967000, spx: 3363, rsg: 93.35, wm: 113.17 },
            { time: 1601559000, spx: 3269.96, rsg: 88.17, wm: 107.91 },
            { time: 1604327400, spx: 3621.63, rsg: 96.72, wm: 119.13 },
            { time: 1606833000, spx: 3756.08, rsg: 96.3, wm: 117.93 },
            { time: 1609770600, spx: 3714.25, rsg: 90.52, wm: 111.32 },
            { time: 1612189800, spx: 3811.16, rsg: 89.09, wm: 110.89 },
            { time: 1614609000, spx: 3972.9, rsg: 99.35, wm: 129.02 },
            { time: 1617283800, spx: 4181.18, rsg: 106.3, wm: 137.97 },
            { time: 1620048600, spx: 4204.12, rsg: 109.18, wm: 140.68 },
            { time: 1622554200, spx: 4297.49, rsg: 110.01, wm: 140.11 },
            { time: 1625146200, spx: 4395.27, rsg: 118.36, wm: 148.26 },
            { time: 1627911000, spx: 4522.69, rsg: 124.13, wm: 155.11 },
            { time: 1630503000, spx: 4307.53, rsg: 120.06, wm: 149.36 },
            { time: 1633095000, spx: 4605.39, rsg: 134.6, wm: 160.23 },
            { time: 1635773400, spx: 4567.01, rsg: 132.26, wm: 160.67 },
            { time: 1638369000, spx: 4766.19, rsg: 139.45, wm: 166.9 },
            { time: 1641220200, spx: 4515.54, rsg: 127.66, wm: 150.44 },
            { time: 1643725800, spx: 4373.95, rsg: 120.28, wm: 144.4 },
            { time: 1646145000, spx: 4530.42, rsg: 132.5, wm: 158.5 },
            { time: 1648819800, spx: 4131.92, rsg: 134.27, wm: 164.44 },
            { time: 1651498200, spx: 4132.16, rsg: 133.84, wm: 158.51 },
            { time: 1654090200, spx: 3785.39, rsg: 130.87, wm: 152.98 },
            { time: 1656682200, spx: 4130.289, rsg: 138.66, wm: 164.56 },
            { time: 1659360600, spx: 3954.99, rsg: 142.72, wm: 169.03 },
            { time: 1662039000, spx: 3585.61, rsg: 136.04, wm: 160.21 },
            { time: 1664803800, spx: 3871.97, rsg: 132.62, wm: 158.37 },
            { time: 1667309400, spx: 4080.11, rsg: 139.29, wm: 167.72 },
            { time: 1669905000, spx: 3839.49, rsg: 128.99, wm: 156.88 },
            { time: 1672756200, spx: 4076.59, rsg: 124.82, wm: 154.73 },
            { time: 1675261800, spx: 3970.16, rsg: 128.93, wm: 149.76 },
            { time: 1677681000, spx: 4109.32, rsg: 135.22, wm: 163.17 },
            { time: 1680528600, spx: 4169.49, rsg: 144.62, wm: 166.05 },
            { time: 1682947800, spx: 4179.84, rsg: 141.63, wm: 161.92 },
            { time: 1685626200, spx: 4450.37, rsg: 153.17, wm: 173.42 },
            { time: 1688391000, spx: 4588.97, rsg: 151.11, wm: 163.79 },
            { time: 1690896600, spx: 4507.67, rsg: 144.13, wm: 156.78 },
            { time: 1693575000, spx: 4288.04, rsg: 142.51, wm: 152.44 },
            { time: 1696253400, spx: 4193.81, rsg: 148.49, wm: 164.33 },
            { time: 1698845400, spx: 4567.81, rsg: 161.84, wm: 170.99 },
            { time: 1701441000, spx: 4769.82, rsg: 164.91, wm: 179.1 },
            { time: 1704205800, spx: 4845.66, rsg: 171.12, wm: 185.63 },
            { time: 1706797800, spx: 5096.28, rsg: 183.6, wm: 205.65 },
            { time: 1709303400, spx: 5254.34, rsg: 191.44, wm: 213.15 },
            { time: 1711978200, spx: 5035.7, rsg: 191.7, wm: 208.02 },
            { time: 1714570200, spx: 5277.5, rsg: 185.19, wm: 210.73 },
            { time: 1717421400, spx: 5460.49, rsg: 194.34, wm: 213.34 },
            { time: 1719840600, spx: 5522.29, rsg: 194.32, wm: 202.66 },
            { time: 1722519000, spx: 5648.39, rsg: 208.21, wm: 212.04 },
            { time: 1725370200, spx: 5762.49, rsg: 200.84, wm: 207.6 },
            { time: 1727789400, spx: 5705.44, rsg: 198, wm: 215.85 },
            { time: 1730467800, spx: 6032.39, rsg: 218.3, wm: 228.22 },
            { time: 1733149800, spx: 5881.62, rsg: 201.18, wm: 201.79 },
            { time: 1735828200, spx: 6040.52, rsg: 216.87, wm: 220.26 },
            { time: 1738593000, spx: 5954.51, rsg: 237.02, wm: 232.78 },
            { time: 1741012200, spx: 5572.08, rsg: 231.71, wm: 224.21 }
        ];

        // Define baseline timestamps
        const baselines = {
            '2010': 1277991000, // June 30, 2010
            '2014': 1404221400, // June 30, 2014
            '2020': 1585747800  // March 31, 2020
        };

        // Function to format timestamp to readable date for footnote
        function formatDate(timestamp) {
            const date = new Date(timestamp * 1000);
            const options = { year: 'numeric', month: 'long', day: 'numeric' };
            return date.toLocaleDateString('en-US', options);
        }

        // Function to prepare chart data based on selected baseline
        function prepareChartData(baselineTimestamp) {
            const filteredStockData = stockData.filter(data => data.time >= baselineTimestamp);
            const initialSpx = filteredStockData[0].spx;
            const initialRsg = filteredStockData[0].rsg;
            const initialWm = filteredStockData[0].wm;

            const spxData = filteredStockData.map(data => ({
                x: new Date(data.time * 1000),
                y: parseFloat(((data.spx - initialSpx) / initialSpx * 100).toFixed(2))
            }));
            const rsgData = filteredStockData.map(data => ({
                x: new Date(data.time * 1000),
                y: parseFloat(((data.rsg - initialRsg) / initialRsg * 100).toFixed(2))
            }));
            const wmData = filteredStockData.map(data => ({
                x: new Date(data.time * 1000),
                y: parseFloat(((data.wm - initialWm) / initialWm * 100).toFixed(2))
            }));

            return { spxData, rsgData, wmData };
        }

        // Create the chart
        const ctx = document.getElementById('stockChart');
        const chart = new Chart(ctx, {
            type: 'line',
            data: {
                datasets: [
                    {
                        label: 'SPX % Return',
                        data: [],
                        borderColor: '#1e90ff',
                        borderWidth: 1.5,
                        pointRadius: 0,
                        fill: false,
                        tension: 0.1
                    },
                    {
                        label: 'RSG % Return',
                        data: [],
                        borderColor: '#32cd32',
                        borderWidth: 1.5,
                        pointRadius: 0,
                        fill: false,
                        tension: 0.1
                    },
                    {
                        label: 'WM % Return',
                        data: [],
                        borderColor: '#ff4500',
                        borderWidth: 1.5,
                        pointRadius: 0,
                        fill: false,
                        tension: 0.1
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { display: false },
                    tooltip: { enabled: false }
                },
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'year',
                            displayFormats: { year: 'yyyy' }
                        },
                        title: {
                            display: true,
                            text: 'Year',
                            font: { size: 12, family: '"Inter", sans-serif', weight: '600' },
                            color: 'rgb(102, 102, 102)'
                        },
                        ticks: {
                            source: 'data',
                            font: { size: 12, family: '"Inter", sans-serif' },
                            color: 'rgb(102, 102, 102)',
                            callback: function(value) {
                                const date = new Date(value);
                                const year = date.getFullYear();
                                return (year >= 2011 && year <= 2025 && year % 2 === 1) ? year : '';
                            },
                            maxTicksLimit: 20
                        },
                        grid: {
                            drawTicks: false,
                            color: 'rgba(102, 102, 102, 0.05)',
                            lineWidth: 0.5
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Percent Return (%)',
                            font: { size: 12, family: '"Inter", sans-serif', weight: '600' },
                            color: 'rgb(102, 102, 102)'
                        },
                        min: -25,
                        max: 600,
                        ticks: {
                            font: { size: 12, family: '"Inter", sans-serif' },
                            color: 'rgb(102, 102, 102)',
                            stepSize: 25,
                            callback: function(value) {
                                if (value === -25 || value === 0 || value === 50) {
                                    return value + '%';
                                } else if (value > 50 && value % 100 === 0) {
                                    return value + '%';
                                }
                                return null;
                            }
                        },
                        grid: { color: 'rgba(102, 102, 102, 0.1)' }
                    }
                }
            }
        });

        // Constants for segmented control
        const SEGMENTED_CONTROL_BASE_SELECTOR = ".segmented-control";
        const SEGMENTED_CONTROL_INDIVIDUAL_SEGMENT_SELECTOR = ".segmented-control .option input";
        const SEGMENTED_CONTROL_BACKGROUND_PILL_SELECTOR = ".segmented-control .selection";

        // Function to update pill position
        function updatePillPosition() {
            const inputs = document.querySelectorAll(SEGMENTED_CONTROL_INDIVIDUAL_SEGMENT_SELECTOR);
            inputs.forEach((elem, index) => {
                if (elem.checked) {
                    const pill = document.querySelector(SEGMENTED_CONTROL_BACKGROUND_PILL_SELECTOR);
                    pill.style.width = `${elem.offsetWidth - 2}px`;
                    pill.style.transform = `translateX(${elem.offsetWidth * index + 1}px)`;
                }
            });
        }

        // Function to update chart and footnote
        function updateChart(baselineKey) {
            const baselineTimestamp = baselines[baselineKey];
            const { spxData, rsgData, wmData } = prepareChartData(baselineTimestamp);

            chart.data.datasets[0].data = spxData;
            chart.data.datasets[1].data = rsgData;
            chart.data.datasets[2].data = wmData;

            let newMax;
            switch (baselineKey) {
                case '2010': newMax = 700; break;
                case '2014': newMax = 600; break;
                case '2020': newMax = 300; break;
                default: newMax = 600;
            }
            chart.options.scales.y.max = newMax;

            chart.update();

            const footnote = document.getElementById('footnote');
            footnote.textContent = `Percentage returns calculated from ${formatDate(baselineTimestamp)} baseline`;
        }

        // Event listeners setup
        document.addEventListener("DOMContentLoaded", () => {
            const inputs = document.querySelectorAll(SEGMENTED_CONTROL_INDIVIDUAL_SEGMENT_SELECTOR);
            inputs.forEach(input => {
                input.addEventListener("change", () => {
                    const baselineKey = input.value;
                    updateChart(baselineKey);
                    updatePillPosition();
                });
            });
            window.addEventListener("resize", updatePillPosition);
            updateChart('2014'); // Initial chart load set to 2015 baseline
            updatePillPosition(); // Initial pill position
        });
    </script>
</body>
</html>
